{"version":3,"sources":["hooks/useForm.js","Form.js","index.js","hooks/useValidation.js"],"names":["isEmpty","obj","Object","keys","length","useForm","initialValues","validationSchema","validate","validateOnChange","validateAllFields","onSubmit","useState","values","setValues","errors","setErrors","getRulesSchema","getPropertiesNameSchema","getOwnPropertyNames","getPropertiesValues","runValidationRules","property","value","result","isEmail","validateEmail","required","validEmail","existMinRule","min","limit","validateField","name","shortValue","message","runValidationErrors","allValues","runValidateAllFields","reduce","acc","_","i","getValidationResult","getErrors","resetForm","runValidationSchema","setFieldValue","deleteErrors","fieldValue","deleteProperty","deleteUndefinedErrors","handleSubmit","e","preventDefault","Form","surname","email","errorObj","testName","assign","testSurname","testEmail","alert","id","type","className","placeholder","onChange","target","main","document","getElementsByTagName","ReactDOM","render","module","exports","field","test"],"mappings":"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","file":"static/js/main.eea0e4fa.chunk.js","sourcesContent":["/* React components */\r\nimport { useState, useEffect } from 'react';\r\n/* Custom hooks */\r\nimport { validateField, validateEmail } from './useValidation';\r\n\r\nconst isEmpty = obj => Object.keys(obj).length === 0;\r\n\r\nconst useForm = ({\r\n\tinitialValues,\r\n\tvalidationSchema,\r\n\tvalidate,\r\n\tvalidateOnChange = true,\r\n\tvalidateAllFields = false,\r\n\tonSubmit\r\n}) => {\r\n\r\n\tconst [values, setValues] = useState(initialValues),\r\n\t\t[errors, setErrors] = useState({}),\r\n\r\n\t\tgetRulesSchema = validationSchema ? Object.values(validationSchema) : [],\r\n\t\tgetPropertiesNameSchema = validationSchema ? Object.getOwnPropertyNames(validationSchema) : [],\r\n\t\tgetPropertiesValues = Object.getOwnPropertyNames(initialValues),\r\n\r\n\t\trunValidationRules = (property, value) => {\r\n\t\t\tlet result;\r\n\t\t\tif (validationSchema[property].isEmail) {\r\n\t\t\t\tresult = validateEmail({\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\trequired: validationSchema[property].required,\r\n\t\t\t\t\tvalidEmail: validationSchema[property].validEmail\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tconst existMinRule = validationSchema[property].min;\r\n\t\t\t\tconst min = existMinRule && existMinRule.limit;\r\n\t\t\t\tresult = validateField({\r\n\t\t\t\t\tname: property,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\trequired: validationSchema[property].required,\r\n\t\t\t\t\tmin,\r\n\t\t\t\t\tshortValue: existMinRule && (typeof existMinRule.message === 'function' ? existMinRule.message(min) : existMinRule.message)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\t\t},\r\n\r\n\t\trunValidationSchema = result => {\r\n\t\t\tsetErrors(result);\r\n\t\t\tisEmpty(result) && onSubmit({\r\n\t\t\t\tvalues,\r\n\t\t\t\tresetForm\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tdeleteUndefinedErrors = (result, property) => {\r\n\t\t\tif (isEmpty(result)) {\r\n\t\t\t\tconst deleteProperty = { ...errors };\r\n\t\t\t\tdelete deleteProperty[property];\r\n\t\t\t\t!isEmpty(errors) && setErrors(deleteProperty);\r\n\t\t\t} else {\r\n\t\t\t\tsetErrors({ ...errors, [property]: result[property] });\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\trunValidationErrors = ({ property, value, allValues }) => {\r\n\t\t\tconst getErrors = validateAllFields ? validate(allValues) : validate(property, value);\r\n\t\t\treturn getErrors;\r\n\t\t},\r\n\r\n\t\trunValidateAllFields = () => {\r\n\t\t\tlet result;\r\n\t\t\tif (validationSchema) {\r\n\t\t\t\tresult = getRulesSchema.reduce((acc, _, i) => {\r\n\t\t\t\t\tconst property = getPropertiesNameSchema[i];\r\n\t\t\t\t\tconst getValidationResult = runValidationRules(property, values[property]);\r\n\t\t\t\t\treturn { ...acc, ...getValidationResult };\r\n\t\t\t\t}, {});\r\n\t\t\t} else if (validate) {\r\n\t\t\t\tresult = getPropertiesValues.reduce((acc, property) => {\r\n\t\t\t\t\t// const getErrors = validate(property, values[property]);\r\n\t\t\t\t\tconst getErrors = runValidationErrors({\r\n\t\t\t\t\t\tproperty,\r\n\t\t\t\t\t\tvalue: values[property],\r\n\t\t\t\t\t\tallValues: values\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn { ...acc, ...getErrors };\r\n\t\t\t\t}, {});\r\n\t\t\t}\r\n\t\t\trunValidationSchema(result);\r\n\t\t},\r\n\r\n\t\tsetFieldValue = (property, value) => {\r\n\t\t\tlet deleteErrors;\r\n\t\t\tconst fieldValue = { ...values, [property]: value };\r\n\t\t\tsetValues(fieldValue);\r\n\t\t\tif (validateOnChange) {\r\n\t\t\t\tif (validationSchema) {\r\n\t\t\t\t\tdeleteErrors = runValidationRules(property, value);\r\n\t\t\t\t} else if (validate) {\r\n\t\t\t\t\tconst getErrors = runValidationErrors({\r\n\t\t\t\t\t\tproperty,\r\n\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\tallValues: fieldValue\r\n\t\t\t\t\t});\r\n\t\t\t\t\tdeleteErrors = getErrors;\r\n\t\t\t\t\ttypeof getErrors === 'object' && setErrors(getErrors);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdeleteUndefinedErrors(deleteErrors, property);\r\n\t\t},\r\n\r\n\t\thandleSubmit = e => {\r\n\t\t\te.preventDefault();\r\n\t\t\treturn runValidateAllFields();\r\n\t\t},\r\n\r\n\t\tresetForm = () => {\r\n\t\t\tsetValues(initialValues);\r\n\t\t\tsetErrors({});\r\n\t\t}\r\n\r\n\treturn {\r\n\t\tvalues,\r\n\t\tsetFieldValue,\r\n\t\terrors,\r\n\t\thandleSubmit,\r\n\t\tresetForm\r\n\t}\r\n}\r\n\r\nexport default useForm;\r\n","/* Custom Hooks */\r\nimport useForm from './hooks/useForm.js';\r\nimport { validateField, validateEmail } from './hooks/useValidation';\r\n\r\n/* Styles */\r\nimport './css/styles.css';\r\n\r\n/* Reglas del Esquema:\r\n\trequired: Si el valor está vacío se pasa como valor el mensaje,\r\n\tmin: { valor mínimo de carácteres\r\n\t\tlimit: define el límite,\r\n\t\tmessage: define un mensaje para la regla min\r\n\t}\r\n*/\r\n/* Esquema de prueba, usado en validationSchema */\r\n// const validateFormSchema = {\r\n// \tname: {\r\n// \t\trequired: 'Por favor ingresa un nombre.',\r\n// \t\tmin: {\r\n// \t\t\tlimit: 7,\r\n// \t\t\tmessage: limit => `El límite es de ${limit} carácteres.`\r\n// \t\t}\r\n// \t},\r\n// \tsurname: {\r\n// \t\trequired: 'Por favor ingrese un apellido.',\r\n// \t\tmin: {\r\n// \t\t\tlimit: 12,\r\n// \t\t\tmessage: 'La cantidad máxima de carácteres es 12.'\r\n// \t\t}\r\n// \t},\r\n// \temail: {\r\n// \t\trequired: 'Por favor debe ingresar su correo electrónico.',\r\n// \t\tisEmail: true,\r\n// \t}\r\n// }\r\n\r\nconst Form = () => {\r\n\t/*\r\n\t\tvalues: obtiene el estado actual de los valores del formulario\r\n\t\tsetField: cambia el estado de los valores del formulario, recibe dos argumentos: el campo (propiedades de initialValues) y su valor,\r\n\t\terrors: obtiene los errores del formulario,\r\n\t\thandleSubmit: función que se pasa al onSubmit del formulario para validarlo\r\n\t*/\r\n\tconst { values, setFieldValue, errors, handleSubmit } = useForm({\r\n\t\t /* Valores iniciales del formulario */\r\n\t\tinitialValues: {\r\n\t\t\tname: '',\r\n\t\t\tsurname: '',\r\n\t\t\temail: ''\r\n\t\t},\r\n\t\t// validationSchema: validateFormSchema,\r\n\t\t// validateAllFields: true,\r\n\t\tvalidate: (property, value) => {\r\n\t\t\t/* Si VALIDATE_ALL_FIELDS es false VALIDATE recibe 2 parámetros: la propiedad y su valor, dependiendo de su propiedad se va a cumplir la regla, si es true, recibe un obj que es el estado de los valores */\r\n\t\t\t/* Crea un obj vacío fuera de la función validate (línea 32), a continuación crea las reglas y añade propiedades al obj que serán los errores para mostrarlos como errorObj.name = 'Campo obligatorio'. Retorna los errores para validarlos */\r\n\t\t\t/* ADVERTENCIA: Si usted a proporciona validateAllFields en TRUE y añade dos argumentos en validate, no funcionará la validación, cuando validateAllFields es false recibe dos parametros y cuando es true sólo uno */\r\n\r\n\t\t\t/* Ejemplo de validación en cada campo individualmente */\r\n\t\t\tconst errorObj = {};\r\n\r\n\t\t\tswitch (property) {\r\n\t\t\t\tcase 'name':\r\n\t\t\t\t\tconst testName = validateField({\r\n\t\t\t\t\t\tname: property,\r\n\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\trequired: 'Por favor ingresa un nombre.',\r\n\t\t\t\t\t\tmin: 6,\r\n\t\t\t\t\t\tshortValue: 'Ingresa un valor menor a 6 carácteres'\r\n\t\t\t\t\t});\r\n\t\t\t\t\tObject.assign(errorObj, testName);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'surname':\r\n\t\t\t\t\tconst testSurname = validateField({\r\n\t\t\t\t\t\tname: property,\r\n\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\trequired: 'Por favor ingresa un apellido.',\r\n\t\t\t\t\t\tmin: 8,\r\n\t\t\t\t\t\tshortValue: 'Ingresa un valor menor a 8 carácteres'\r\n\t\t\t\t\t});\r\n\t\t\t\t\tObject.assign(errorObj, testSurname);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'email':\r\n\t\t\t\t\t/* VERIFICA EL HOOK useValidation y su función validateEmail */\r\n\t\t\t\t\tconst testEmail = validateEmail({\r\n\t\t\t\t\t\tvalue,\r\n\t\t\t\t\t\trequired: 'Por favor ingresa un email',\r\n\t\t\t\t\t\tvalidEmail: 'El email que has ingresado no es correcto'\r\n\t\t\t\t\t});\r\n\t\t\t\t\tObject.assign(errorObj, testEmail);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn errorObj;\r\n\t\t\t/* Si todas las reglas se cumplen, se ejecuta onSubmit */\r\n\r\n\t\t\t/* VALIDACIÓN EN TODOS LOS CAMPOS, DEBE TENER validateAllFields en TRUE y recibir un sólo argumento\t\t\r\n\t\t\tCONSULTA EL HOOK useValidation y su función validateField\r\n\r\n\t\t\tconst testName = validateField({\r\n\t\t\t\tname: 'name',\r\n\t\t\t\tvalue: value.name,\r\n\t\t\t\trequired: 'Por favor ingresa un nombre.',\r\n\t\t\t\tmin: 6,\r\n\t\t\t\tshortValue: 'Ingresa un valor menor a 6 carácteres'\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tconst testSurname = validateField({\r\n\t\t\t\tname: 'surname',\r\n\t\t\t\tvalue: value.surname,\r\n\t\t\t\trequired: 'Por favor ingresa un apellido.',\r\n\t\t\t\tmin: 8,\r\n\t\t\t\tshortValue: 'Ingresa un valor menor a 8 carácteres'\r\n\t\t\t});\r\n\r\n\t\t\t VERIFICA EL HOOK useValidation y su función validateEmail\r\n\t\t\tconst testEmail = validateEmail({\r\n\t\t\t\tvalue: value.email,\r\n\t\t\t\trequired: 'Por favor ingresa un email',\r\n\t\t\t\tvalidEmail: 'El email que has ingresado no es correcto'\r\n\t\t\t});\r\n\r\n\t\t\tconst errorObj = Object.assign({}, testName, testSurname, testEmail);\r\n\t\t\treturn errorObj;\r\n\t\t\t*/\r\n\t\t\t\r\n\t\t},\r\n\t\tonSubmit: ({\r\n\t\t\tvalues,\r\n\t\t\tresetForm\r\n\t\t}) => {\r\n\t\t\talert('You are logged');\r\n\t\t\tresetForm(); // reinicia el formulario\r\n\t\t}\r\n\t})\r\n\r\n\treturn (\r\n\t\t<form id=\"container\" onSubmit={handleSubmit}>\r\n\t\t\t<h2>Formulario:</h2>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={values.name}\r\n\t\t\t\tclassName=\"textInput\"\r\n\t\t\t\tplaceholder=\"Ingresa un nombre\"\r\n\t\t\t\tonChange={e => setFieldValue('name', e.target.value)}\r\n\t\t\t/>\r\n\r\n\t\t\t{errors.name && <span className=\"error-message\">{errors.name}</span>}\r\n\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={values.surname}\r\n\t\t\t\tclassName=\"textInput\"\r\n\t\t\t\tplaceholder=\"Ingresa un apellido\"\r\n\t\t\t\tonChange={e => setFieldValue('surname', e.target.value)}\r\n\t\t\t/>\r\n\r\n\t\t\t{errors.surname && <span className=\"error-message\">{errors.surname}</span>}\r\n\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={values.email}\r\n\t\t\t\tclassName=\"textInput\"\r\n\t\t\t\tplaceholder=\"Ingresa un email\"\r\n\t\t\t\tonChange={e => setFieldValue('email', e.target.value)}\r\n\t\t\t/>\r\n\r\n\t\t\t{errors.email && <span className=\"error-message\">{errors.email}</span>}\r\n\r\n\t\t\t<button type=\"submit\" id=\"button\">Enviar</button>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default Form;\r\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport Form from './Form.js';\n\nconst main = document.getElementsByTagName('main')[0];\n\nReactDOM.render(\n  <StrictMode>\n    <Form />\n  </StrictMode>,\n  main\n);\n","const validateField = field => {\r\n  const errors = {};\r\n    if (field.value === '') {\r\n      errors[field.name] = field.required || 'Este campo es obligatorio.'\r\n    } else if (field.value.length < field.min) {\r\n      errors[field.name] = field.shortValue || `Debe tener un mínimo de ${field.min} cáracteres.`\r\n    }\r\n  return errors;\r\n}\r\n\r\nconst validateEmail = email => {\r\n  const errors = {},\r\n    isValidEmail = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  if (email.value === '') {\r\n    errors.email = email.required || 'Por favor ingresa tu correo electrónico.';\r\n  } else if (!isValidEmail.test(email.value)) {\r\n    errors.email = email.validEmail || 'Ingresa un correo electrónico válido.';\r\n  };\r\n  return errors;\r\n}\r\n\r\nmodule.exports = { validateField, validateEmail }\r\n"],"sourceRoot":""}