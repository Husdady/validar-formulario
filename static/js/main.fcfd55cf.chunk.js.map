{"version":3,"sources":["hooks/useForm.js","Form.js","index.js","hooks/useValidation.js"],"names":["useForm","initialValues","validationSchema","onSubmit","useState","values","setValues","errors","setErrors","setFieldValue","property","value","result","isEmail","validateEmail","required","validEmail","min","limit","validateField","name","emptyValue","shortValue","message","runValidationSchema","handleSubmit","e","preventDefault","validateFormSchema","email","Form","id","type","className","placeholder","onChange","target","ReactDOM","render","document","body","module","exports","field","length","test"],"mappings":"oMA+EeA,EAzEC,SAAC,GAKV,IAHNC,EAGK,EAHLA,cACAC,EAEK,EAFLA,iBACAC,EACK,EADLA,SAGA,EAA4BC,mBAASH,GAArC,mBAAOI,EAAP,KAAeC,EAAf,OACsBF,mBAAS,IAD/B,mBACCG,EADD,KACSC,EADT,KA0DA,MAAO,CACNH,SACAI,cAtBe,SAACC,EAAUC,GAC1BL,EAAU,2BAAID,GAAL,kBAAcK,EAAWC,KApCb,SAACD,EAAUC,GAEhC,IAAIC,EAEJ,GAAIV,EAAkB,CAGrB,GAAIA,EAAiBQ,GAAUG,QAE9BD,EAASE,wBAAc,CACtBH,QACAI,SAAUb,EAAiBQ,GAAUK,SACrCC,WAAYd,EAAiBQ,GAAUM,iBAElC,CAEN,IAAMC,EAAMf,EAAiBQ,GAAUO,IAAIC,MAC3CN,EAASO,wBAAc,CACtBC,KAAMV,EACNC,QACAU,WAAYnB,EAAiBQ,GAAUK,SACvCE,MACAK,WAAYpB,EAAiBQ,GAAUO,IAAIM,QAAQN,KAIrDT,EAAU,2BAAID,GAAL,kBAAcG,EAAWE,EAAOF,OAW1Cc,CAAoBd,EAAUC,IAqB9BJ,SACAkB,aAnBc,SAAAC,GAGd,OAFAA,EAAEC,iBAEKxB,EAASE,M,eCrDZuB,EAAqB,CAC1BR,KAAM,CACLL,SAAU,+BACVE,IAAK,CACJC,MAAO,EACPK,QAAS,SAAAL,GAAK,mCAAuBA,EAAvB,sBAGhBW,MAAO,CACNd,SAAU,mDACVF,SAAS,IA6CIiB,EAzCF,WAEZ,MAAwD9B,EAAQ,CAC/DC,cAAe,CACdmB,KAAM,GACNS,MAAO,IAER3B,iBAAkB0B,EAClBzB,SAAU,SAAAE,OANHA,EAAR,EAAQA,OAAQI,EAAhB,EAAgBA,cAAeF,EAA/B,EAA+BA,OAAQkB,EAAvC,EAAuCA,aAWtC,OACE,uBAAMM,GAAG,YAAY5B,SAAUsB,EAA/B,UACA,6CACA,uBACCO,KAAK,OACLrB,MAAON,EAAOe,KACda,UAAU,YACVC,YAAY,oBACZC,SAAU,SAAAT,GAAC,OAAIjB,EAAc,OAAQiB,EAAEU,OAAOzB,UAG9CJ,EAAOa,MAAQ,sBAAMa,UAAU,gBAAhB,SAAiC1B,EAAOa,OAExD,uBACCY,KAAK,OACLrB,MAAON,EAAOwB,MACdI,UAAU,YACVC,YAAY,mBACZC,SAAU,SAAAT,GAAC,OAAIjB,EAAc,QAASiB,EAAEU,OAAOzB,UAG/CJ,EAAOsB,OAAS,sBAAMI,UAAU,gBAAhB,SAAiC1B,EAAOsB,QAEzD,wBAAQG,KAAK,SAASD,GAAG,SAAzB,wBCpDJM,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,O,gBCaXC,EAAOC,QAAU,CAAEvB,cArBG,SAAAwB,GACpB,IAAMpC,EAAS,GAMf,MALsB,KAAhBoC,EAAMhC,MACRJ,EAAOoC,EAAMvB,MAAQuB,EAAMtB,WAClBsB,EAAMhC,MAAMiC,OAASD,EAAM1B,MACpCV,EAAOoC,EAAMvB,MAAQuB,EAAMrB,YAAN,qCAA+CqB,EAAM1B,IAArD,mBAElBV,GAcyBO,cAXZ,SAAAe,GACpB,IAAMtB,EAAS,GAOf,MALoB,KAAhBsB,EAAMlB,MACRJ,EAAOsB,MAAQA,EAAMd,UAAY,6CAFlB,4JAGQ8B,KAAKhB,EAAMlB,SAClCJ,EAAOsB,MAAQA,EAAMb,YAAc,8CAE9BT,M","file":"static/js/main.fcfd55cf.chunk.js","sourcesContent":["/* React components */\r\nimport { useState, useEffect } from 'react';\r\n/* Custom hooks */\r\nimport { validateField, validateEmail } from './useValidation';\r\n\r\n/* Hook para validar formulario */\r\nconst useForm = ({\r\n\t/* Añado por ahora 3 propiedades que serán los valores iniciales del formulario (initialValues), válido el formulario con validationSchema que es un obj que define las reglas en los campos, y onSubmit se debería ejecutar cuando el formulario es válido */\r\n\tinitialValues,\r\n\tvalidationSchema,\r\n\tonSubmit\r\n}) => {\r\n\r\n\tconst [values, setValues] = useState(initialValues),\r\n\t[errors, setErrors] = useState({}),\r\n\r\n\trunValidationSchema = (property, value) => {\r\n\r\n\t\tlet result;\r\n\r\n\t\tif (validationSchema) {\r\n\t\t\t/* primero verifico si existe el Schema, acontinuación si tiene una propiedad llamada isEmail que válida correos electrónicos, para ello el Schema debe tener propiedades que se llamen iguales a los 'values' */\r\n\r\n\t\t\tif (validationSchema[property].isEmail) {\r\n\t\t\t\t/* Si se cumple la condición entonces llamamos a la función validateEmail, que acepta un obj como parámetro y tres propiedades, el valor del email (texto) que se testea en la función, required: si el email está vacío, y validEmail, ambos retornan un mensaje dependiendo de cuál condición se cumple  */\r\n\t\t\t\tresult = validateEmail({\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\trequired: validationSchema[property].required, /* Cómo mensaje le pasamos la propiedad required del Schema dependiendo del campo */\r\n\t\t\t\t\tvalidEmail: validationSchema[property].validEmail /* Cómo mensaje le pasamos la propiedad validEmail del Schema dependiendo del campo */\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\t/* Válida un campo si este, está vacío o se ha definido un límite de carácteres, validateField recibe 5 propiedades, el nombre del campo (name), el valor, un mensaje si el valor está vacío (emptyValue), min, el límite de carácteres, y shortValue, el mensaje que se muestra cuando min se cumple  */\r\n\t\t\t\tconst min = validationSchema[property].min.limit;\r\n\t\t\t\tresult = validateField({\r\n\t\t\t\t\tname: property,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\temptyValue: validationSchema[property].required,\r\n\t\t\t\t\tmin,\r\n\t\t\t\t\tshortValue: validationSchema[property].min.message(min)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tsetErrors({...errors, [property]: result[property] });\r\n\t\t\t\r\n\t\t}\r\n\t},\r\n\r\n\trunValidateAllFields = () => {\r\n\t\t//// función para validar en todos los campos al presionar en el botón\r\n\t},\r\n\t\r\n\tsetFieldValue = (property, value) => {\r\n\t\tsetValues({...values, [property]: value}); /* cambio el valor dependiendo del campo que se está focuseando */\r\n\t\trunValidationSchema(property, value);\r\n\t},\r\n\r\n\thandleSubmit = e => {\r\n\t\te.preventDefault();\r\n\t\trunValidateAllFields();\r\n\t\treturn onSubmit(values);\r\n\t},\r\n\r\n\tresetForm = () => {\r\n\t\tsetValues(initialValues);\r\n\t\tsetErrors({});\r\n\t}\r\n\r\n\t// useEffect(() => {\r\n\t// \tconsole.log(errors);\r\n\t// }, [errors]);\r\n\r\n\treturn {\r\n\t\tvalues,\r\n\t\tsetFieldValue,\r\n\t\terrors,\r\n\t\thandleSubmit\r\n\t}\r\n}\r\n\r\nexport default useForm;\r\n","/* Custom Hooks */\r\nimport useForm from './hooks/useForm.js';\r\n\r\n/* Styles */\r\nimport './css/styles.css';\r\n\r\nconst validateFormSchema = {\r\n\tname: {\r\n\t\trequired: 'Por favor ingresa un nombre.',\r\n\t\tmin: {\r\n\t\t\tlimit: 7,\r\n\t\t\tmessage: limit => `El límite es de ${limit} carácteres.`\r\n\t\t}\r\n\t},\r\n\temail: {\r\n\t\trequired: 'Por favor debe ingresar su correo electrónico',\r\n\t\tisEmail: true,\r\n\t}\r\n}\r\n\r\nconst Form = () => {\r\n\r\n\tconst { values, setFieldValue, errors, handleSubmit } = useForm({\r\n\t\tinitialValues: {\r\n\t\t\tname: '',\r\n\t\t\temail: ''\r\n\t\t},\r\n\t\tvalidationSchema: validateFormSchema,\r\n\t\tonSubmit: values => {\r\n\t\t\t// alert('You are logged!');\r\n\t\t}\r\n\t})\r\n\r\n  return (\r\n    <form id=\"container\" onSubmit={handleSubmit}>\r\n    <h2>Formulario:</h2>\r\n    <input\r\n    \ttype=\"text\"\r\n    \tvalue={values.name}\r\n    \tclassName=\"textInput\"\r\n    \tplaceholder=\"Ingresa un nombre\"\r\n    \tonChange={e => setFieldValue('name', e.target.value)}\r\n    />\r\n\r\n    {errors.name && <span className=\"error-message\">{errors.name}</span>}\r\n\r\n    <input\r\n    \ttype=\"text\"\r\n    \tvalue={values.email}\r\n    \tclassName=\"textInput\"\r\n    \tplaceholder=\"Ingresa un email\"\r\n    \tonChange={e => setFieldValue('email', e.target.value)}\r\n    />\r\n\r\n    {errors.email && <span className=\"error-message\">{errors.email}</span>}\r\n\r\n    <button type=\"submit\" id=\"button\">Enviar</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport Form from './Form.js';\n\nReactDOM.render(\n  <StrictMode>\n    <Form />\n  </StrictMode>,\n  document.body\n);\n","const validateField = field => {\r\n  const errors = {};\r\n    if (field.value === '') {\r\n      errors[field.name] = field.emptyValue\r\n    } else if (field.value.length < field.min) {\r\n      errors[field.name] = field.shortValue || `Debe tener un mínimo de ${field.min} cáracteres`\r\n    }\r\n  return errors;\r\n}\r\n\r\nconst validateEmail = email => {\r\n  const errors = {},\r\n    isValidEmail = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  if (email.value === '') {\r\n    errors.email = email.required || 'Por favor ingresa tu correo electrónico';\r\n  } else if (!isValidEmail.test(email.value)) {\r\n    errors.email = email.validEmail || 'Ingresa un correo electrónico válido';\r\n  };\r\n  return errors;\r\n}\r\n\r\nmodule.exports = { validateField, validateEmail }\r\n"],"sourceRoot":""}